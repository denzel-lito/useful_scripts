# Визуализация применения функции через apply в pandas:
from tqdm import tqdm
tqdm.pandas()
df_clean['vector'] = df_clean.tokens.progress_apply(lambda x: …)



# Параллелизм процесса:
from pandarallel import pandarallel
pandarallel.initialize(progress_bar=True)
df_clean['vector'] = df_clean.tokens.parallel_apply(lambda x: …)
# ---------------------------------------------------------------
import swifter
df.a1.swifter.apply(lambda x: …)
# ---------------------------------------------------------------
import multiprocessing
 
def _apply_df(args):
    df, func, kwargs = args
    return df.progress_apply(func, **kwargs)
 
def apply_by_multiprocessing(df, func, **kwargs):
    workers = kwargs.pop('workers')
    pool = multiprocessing.Pool(processes=workers)
    result = pool.map(_apply_df, [(d, func, kwargs)
            for d in np.array_split(df, workers)])
    pool.close()
    return pd.concat(list(result))
 
df_new = apply_by_multiprocessing(df, def_square, axis=1, workers=4) 
# ---------------------------------------------------------------
from pyspark.sql.functions import udf, col
from pyspark.sql.types import BooleanType
func_udf = udf(lambda x: …, BooleanType())
df = df.withColumn('suitable', func_udf (col(text_column)))